import { createClient } from '@sanity/client'

const client = createClient({
  projectId: 'ezcicpxn',
  dataset: 'production',
  apiVersion: '2025-07-25',
  token: 'skCF73jldfB9nEgbHXuUSq7Si6EDJhnwQJLZX2Lw2vu7wob9bkm3KmbYAKtMgRshpGPwAi9A7fu2Et3AjjzDIG0oMPVneWgAJqneVCpWyULelbX6Hn1qTi4MOFKWgRbjjkBILm01Zq3nMZjGLLO0ff5uEfiDHlD7wYVTCYRLPyVASdoLU4b7',
  useCdn: false
})

const fallbackServices = [
    {
      id: 0,
      title: "Branding",
      subtitle: "Marca n√£o √© s√≥ cores e apar√™ncia, √© dire√ß√£o.",
      description: "Na Margaretas, a constru√ß√£o da marca nasce de dentro pra fora: nome, identidade visual, tom de voz, arqu√©tipos, ess√™ncia, gen√©tica, posicionamento. Tudo pensado para que a sua comunica√ß√£o tenha alma, coer√™ncia e reconhecimento real.",
      highlight: "Branding com vis√£o, m√©todo e verdade.",
      cta: "Quero construir minha marca",
      icon: "EyeIcon",
    },
    {
      id: 1,
      title: "Gest√£o de Redes Sociais ‚Äì Pacotes Personalizados",
      subtitle: "Criamos conte√∫do com prop√≥sito, copy inteligente e est√©tica estrat√©gica alinhada a sua persona, arqu√©tipos e o seu branding, para canais como Instagram, TikTok, Google Meu Neg√≥cio, Pinterest e outros.",
      description: "Cada rede com sua fun√ß√£o. Cada publica√ß√£o com um porqu√™.",
      highlight: "Conte√∫do com prop√≥sito. Resultado com estrat√©gia.",
      cta: "Quero pacote de redes sociais",
      icon: "UserGroupIcon",
    },
    {
      id: 2,
      title: "Cria√ß√£o de Sites",
      subtitle: "Seu site precisa representar quem sua marca e conectar com todos os outros canais com clareza, confian√ßa e t√©cnicas UX de alta convers√£o.",
      description: "Desenvolvemos p√°ginas institucionais, landings e sites completos com design funcional, copy estrat√©gica e arquitetura intuitiva.",
      highlight: "Um site com cara de marca grande ‚Äî mesmo que voc√™ ainda esteja crescendo.",
      cta: "Quero um site estrat√©gico",
      icon: "GlobeAltIcon",
    },
    {
      id: 3,
      title: "Performance e Tr√°fego Pago",
      subtitle: "Voc√™ n√£o precisa aparecer mais. Precisa aparecer melhor.",
      description: "Planejamos e gerenciamos campanhas em Meta Ads, Google, TikTok, Pinterest com estrat√©gia conectada √† sua comunica√ß√£o e ao seu momento de neg√≥cio.",
      highlight: "Tr√°fego com dire√ß√£o. Performance com prop√≥sito.",
      cta: "Quero escalar com tr√°fego",
      icon: "RocketLaunchIcon",
    },
    {
      id: 4,
      title: "Consultoria de Marketing",
      subtitle: "√Äs vezes, o que falta n√£o √© produ√ß√£o, √© clareza.",
      description: "Nossas consultorias s√£o pensadas para ajustar o que est√° fora de lugar e revelar caminhos poss√≠veis. Voc√™ traz as d√∫vidas, a gente entrega estrutura, estrat√©gia e decis√£o.",
      highlight: "Intelig√™ncia estrat√©gica sob demanda.",
      cta: "Quero uma consultoria com a Margaretas",
      icon: "LightBulbIcon",
    },
    {
      id: 5,
      title: "Solu√ß√µes Personalizadas (para estruturas diferentes)",
      subtitle: "Cada empresa tem uma configura√ß√£o interna, algumas sem time, outras com equipe enxuta ou com estrutura robusta.",
      description: "Independente do seu cen√°rio, a Margaretas entra para alinhar, conectar e liderar a comunica√ß√£o do jeito que o seu neg√≥cio precisa.",
      highlight: "Solu√ß√µes que se adaptam ao seu cen√°rio.",
      cta: "Quero uma solu√ß√£o feita pra minha empresa",
      icon: "CogIcon",
    }
  ]

async function verifyServicesData() {
  console.log('üîç Verificando integridade dos dados de Servi√ßos...')
  try {
    const sanityData = await client.fetch(`*[_type == "services"][0]`)

    if (!sanityData) {
      console.error('‚ùå Nenhum dado de servi√ßo encontrado no Sanity.')
      return
    }

    const sanityServices = sanityData.servicesList.sort((a, b) => a.id - b.id);

    let allMatch = true;

    if (sanityServices.length !== fallbackServices.length) {
      console.error(`‚ùå Diverg√™ncia na quantidade de servi√ßos. Sanity: ${sanityServices.length}, Original: ${fallbackServices.length}`);
      allMatch = false;
    }

    for (let i = 0; i < fallbackServices.length; i++) {
      const original = fallbackServices[i];
      const sanity = sanityServices[i];

      console.log(`\n--- Comparando Servi√ßo #${original.id}: ${original.title} ---`);

      if (!sanity) {
        console.error(`‚ùå Servi√ßo com id ${original.id} n√£o encontrado no Sanity.`);
        allMatch = false;
        continue;
      }

      Object.keys(original).forEach(key => {
        if (original[key] !== sanity[key]) {
          console.log(`  - ‚ùó Diverg√™ncia no campo "${key}":`);
          console.log(`    > Original: "${original[key]}"`);
          console.log(`    > Sanity:   "${sanity[key]}"`);
          allMatch = false;
        } else {
          console.log(`  - ‚úÖ Campo "${key}" corresponde.`);
        }
      });
    }

    console.log('\n--- Resultado da Verifica√ß√£o ---');
    if (allMatch) {
      console.log('‚úÖ Todos os dados da se√ß√£o de servi√ßos no Sanity correspondem perfeitamente aos dados originais do componente!');
    } else {
      console.error('‚ùå Foram encontradas diverg√™ncias entre os dados do Sanity e os dados originais. Verifique os logs acima.');
    }

  } catch (error) {
    console.error('‚ùå Erro ao verificar os dados de servi√ßos:', error);
  }
}

verifyServicesData() 